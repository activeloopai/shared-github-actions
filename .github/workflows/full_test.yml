name: Hub full tests
on:
  workflow_call:
    inputs:
      repo:
        required: true
        type: string
      ref:
        required: true
        type: string
    secrets:
      token:
        required: true
      aws_key_id:
        required: true
      aws_secret_access_key:
        required: true
      gcp_project_id:
        required: true
      gcp_sa_key:
        required: true
      oauth_client_id:
        required: true
      oauth_client_secret:
        required: true
      hub_username:
        required: true
      hub_password:
        required: true
      kaggle_username:
        required: true
      kaggle_key:
        required: true

jobs:
  full-test:
    name: Python ${{ matrix.python-version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - 3.6
          - 3.8
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.token }}
      - name: Checkout the buH source code
        uses: actions/checkout@v2
        with:
          path: buH
          repository: activeloopai/buH
          token: ${{ secrets.token }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('hub/requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v2
        if: startsWith(runner.os, 'macOS')
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('hub/requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Windows')
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('hub/requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Setup FFmpeg Windows
        uses: FedericoCarboni/setup-ffmpeg@v1
        if: startsWith(runner.os, 'Windows')
        with:
          token: ${{ secrets.token }}
      - name: Setup FFmpeg Linux
        if: startsWith(runner.os, 'Linux')
        run: sudo apt-get update && sudo apt-get install  -y ffmpeg libavcodec-dev libavformat-dev libswscale-dev libavdevice-dev libavfilter-dev
      - name: Setup FFmpeg Mac
        if: startsWith(runner.os, 'macOS')
        run: |
          brew install ffmpeg@4
          brew link ffmpeg@4
          echo 'export PATH="/usr/local/opt/ffmpeg@4/bin:$PATH"' >> /Users/runner/.bash_profile
          export LDFLAGS="-L/usr/local/opt/ffmpeg@4/lib"
          export CPPFLAGS="-I/usr/local/opt/ffmpeg@4/include"
          export PKG_CONFIG_PATH="/usr/local/opt/ffmpeg@4/lib/pkgconfig"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: us-east-1
      - name: Test AWS credentials validity
        run: aws sts get-caller-identity
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.gcp_project_id }}
          service_account_key: ${{ secrets.gcp_sa_key }}
          export_default_credentials: true
          credentials_file_path: "gcs.json"
      - name: Test GCP credentials validity
        run: gcloud info
      - name: Install requirements
        run: |
          pip3 install --upgrade pip --user
          pip3 install --upgrade setuptools
          pip3 install -r hub/requirements/tests.txt
          pip3 install -r hub/requirements/plugins.txt
          pip3 install -r hub/requirements/common.txt
          pip3 install -e buH
          sh buH/buh/scripts/create_all.sh
          pip3 install -e .
        env:
          BUGGER_OFF: "true"
      - name: Run tests
        run: |
          python3 -m pytest --local --cov-report=xml --cov=./ --s3 --gcs --gdrive --hub-cloud --ignore-glob=buH/*
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcs.json
          CLIENT_ID: ${{ secrets.oauth_client_id }}
          CLIENT_SECRET: ${{ secrets.oauth_client_secret }}
          ENV_HUB_DEV_PASSWORD: ${{ secrets.hub_password }}
          ACTIVELOOP_HUB_USERNAME: ${{ secrets.hub_username }}
          ACTIVELOOP_HUB_PASSWORD: ${{ secrets.hub_password }}
          KAGGLE_USERNAME: ${{ secrets.kaggle_username }}
          KAGGLE_KEY: ${{ secrets.kaggle_key }}
      - name: Run backwards compatibility tests
        run: |
          python3 -m pytest buH/
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcs.json
          ENV_HUB_DEV_PASSWORD: ${{ secrets.hub_password }}
          ACTIVELOOP_HUB_USERNAME: ${{ secrets.hub_username }}
          ACTIVELOOP_HUB_PASSWORD: ${{ secrets.hub_password }}
          KAGGLE_USERNAME: ${{ secrets.kaggle_username }}
          KAGGLE_KEY: ${{ secrets.kaggle_key }}
      - name: Upload coverage to codecov
        if: startsWith(runner.os, 'Linux')
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
