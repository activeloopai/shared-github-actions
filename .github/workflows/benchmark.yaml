name: Deep Lake benchmarks
on:
  workflow_call:
    secrets:
      benchmarks_aws_role_arn:
        required: true
      slack_url:
        required: true
      activeloop_username:
        required: true
      activeloop_password:
        required: true
      benchmarks_repo: 
        required: true
      benchmark_report:
        required: true

jobs:
  start-benchmark-instances:
    name: Start benchmark instances
    runs-on: benchmarks_macos_intel
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.benchmarks_aws_role_arn }}
          aws-region: us-east-1
          mask-aws-account-id: true
      - name: start benchmark instances
        shell: bash
        env:
          SLACK_URL: ${{ secrets.slack_url }}
          BENCHMARKS_REPO: ${{ secrets.benchmarks_repo }}
        run: |
          cd "$HOME/GitHub/deeplake_benchmarks/${BENCHMARKS_REPO}"
          git pull
          cd scripts
          python3 ec2.py start

  benchmark:
    name: ${{ matrix.node }}
    needs: start-benchmark-instances
    runs-on: "benchmarks_${{ matrix.node }}"
    env:
      NODE: ${{ matrix.node }}
      BENCHMARKS_REPO: ${{ secrets.benchmarks_repo }}
      BENCHMARK_REPORT: ${{ secrets.benchmark_report }}
    strategy:
      fail-fast: false
      matrix:
        node:
          - macos_intel
          - linux_cpu
          # - linux_gpu
          # - linux_4_gpu
    steps:
      - name: Do benchmarks
        if: contains(matrix.node, 'gpu')
        shell: bash
        run: |
          if [[ "${NODE}" =~ "gpu" ]]
          then
            # >>> conda initialize >>>
            # !! Contents within this block are managed by 'conda init' !!
            __conda_setup="$('/home/ubuntu/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
            if [ $? -eq 0 ]; then
                eval "$__conda_setup"
            else
                if [ -f "/home/ubuntu/anaconda3/etc/profile.d/conda.sh" ]; then
                    . "/home/ubuntu/anaconda3/etc/profile.d/conda.sh"
                else
                    export PATH="/home/ubuntu/anaconda3/bin:$PATH"
                fi
            fi
            unset __conda_setup
            # <<< conda initialize <<<
            conda activate ffcv
          fi
          cd "$HOME/GitHub/deeplake_benchmarks/${BENCHMARKS_REPO}"
          git pull
          python3.9 -m venv ../env
          . ../env/bin/activate
          python3.9 -m pip install -U pip
          python3.9 -m pip install -U setuptools
          python3.9 -m pip install -r requirements/requirements.txt
          if [[ "${NODE}" =~ 'gpu' ]]
          then
            python3.9 -m pip install -r requirements/train.txt
          fi
          cd ../deeplake
          git pull
          if [ "${GITHUB_EVENT_NAME}" == 'pull_request' ]
          then
            git checkout "${GITHUB_HEAD_REF}"
            git pull origin "${GITHUB_HEAD_REF}"
            SHA="$(git rev-parse origin/"${GITHUB_HEAD_REF}")"
          else
            git checkout "${GITHUB_REF_NAME}"
            git pull origin "${GITHUB_REF_NAME}"
            SHA="$(git rev-parse origin/"${GITHUB_REF_NAME}")"
          fi
          python3.9 -m pip install -e .[all]
          git checkout main
          activeloop login --username ${{ secrets.activeloop_username }} --password ${{ secrets.activeloop_password }}          
          
          cd "../${BENCHMARKS_REPO}"
          python3.9 run_benchmarks.py --machine "${NODE}"

          python3 -m pip install -r requirements/scripts.txt
          python3 scripts/report.py \
            --type md \
            --base-result "../${BENCHMARK_REPORT}/${NODE}/latest/results.csv" \
            --new-result results.csv \
            --output report.md
          python3 scripts/report.py \
            --type csv \
            --base-result "../${BENCHMARK_REPORT}/${NODE}/latest/results.csv" \
            --new-result results.csv \
            --output report.csv

          if [ "${GITHUB_EVENT_NAME}" == 'push' ]
          then
            cd "../${BENCHMARK_REPORT}"
            git checkout main
            git pull
            cd "${OLDPWD}"
            if [ "${GITHUB_REF_NAME}" == 'main' ]
            then
              cp -f report.md   "../${BENCHMARK_REPORT}/${NODE}/main/report.md"
              cp -f report.md   "../${BENCHMARK_REPORT}/${NODE}/main/report-${SHA}.md"
              cp -f report.csv  "../${BENCHMARK_REPORT}/${NODE}/main/report.csv"
              cp -f report.csv  "../${BENCHMARK_REPORT}/${NODE}/main/report-${SHA}.csv"
              cp -f results.csv "../${BENCHMARK_REPORT}/${NODE}/main/results.csv"
              cp -f results.csv "../${BENCHMARK_REPORT}/${NODE}/main/results-${SHA}.csv"
            else 
              cp -f report.md   "../${BENCHMARK_REPORT}/${NODE}/latest/report.md"
              cp -f report.csv  "../${BENCHMARK_REPORT}/${NODE}/latest/report.csv"
              cp -f results.csv "../${BENCHMARK_REPORT}/${NODE}/latest/results.csv"\
            
              mkdir "../${BENCHMARK_REPORT}/${NODE}/${GITHUB_REF_NAME/\//-}"
              cp -f report.md   "../${BENCHMARK_REPORT}/${NODE}/${GITHUB_REF_NAME/\//-}/report.md"
              cp -f report.csv  "../${BENCHMARK_REPORT}/${NODE}/${GITHUB_REF_NAME/\//-}/report.csv"
              cp -f results.csv "../${BENCHMARK_REPORT}/${NODE}/${GITHUB_REF_NAME/\//-}/results.csv"
            fi
            cd "${OLDPWD}"
            git add .
            git commit -m 'Update report for ${GITHUB_REF_NAME} benchmark'
            git push origin main
            cd "${OLDPWD}"
            python3 scripts/notify_slack.py
          fi

      - name: Comment report on PR
        if: inputs.benchmark_event == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: "$HOME/GitHub/deeplake_benchmarks/${BENCHMARKS_REPO}/report.md"
          comment_tag: "${NODE}-${GITHUB_EVENT_NAME}"

      - name: Report Status
        if: always() && inputs.benchmark_event == 'pull_request'
        uses: ravsamhq/notify-slack-action@v1
        with:
          status: ${{ job.status }}
          notify_when: "failure"
          footer: "<{run_url}|View Run>"
          notification_title: "Controlplane CI"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack_url }}

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          rm $HOME/GitHub/deeplake_benchmarks/${BENCHMARKS_REPO}/report.md    || true
          rm $HOME/GitHub/deeplake_benchmarks/${BENCHMARKS_REPO}/report.csv   || true
          rm $HOME/GitHub/deeplake_benchmarks/${BENCHMARKS_REPO}/results.csv  || true
          rm -r $HOME/GitHub/deeplake_benchmarks/env || true
